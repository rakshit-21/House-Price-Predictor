from flask import Flask, render_template, request
import joblib
import numpy as np
import pandas as pd
import sklearn
from sklearn.tree._tree import Tree

app = Flask(__name__)

# Create a custom Tree subclass with our modified __setstate__
class PatchedTree(Tree):
    def __setstate__(self, state):
        """Modified to handle older sklearn tree formats"""
        if isinstance(state, tuple) and len(state) == 3:
            nodes, values, features = state
            if 'missing_go_to_left' not in nodes.dtype.names:
                new_dtype = [
                    ('left_child', '<i8'), ('right_child', '<i8'),
                    ('feature', '<i8'), ('threshold', '<f8'),
                    ('impurity', '<f8'), ('n_node_samples', '<i8'),
                    ('weighted_n_node_samples', '<f8'),
                    ('missing_go_to_left', 'u1')
                ]
                new_nodes = np.zeros(nodes.shape, dtype=new_dtype)
                for name in nodes.dtype.names:
                    new_nodes[name] = nodes[name]
                new_nodes['missing_go_to_left'] = False
                state = (new_nodes, values, features)
        return super().__setstate__(state)

# Monkey patch the Tree class
sklearn.tree._tree.Tree = PatchedTree

# Now load your model
try:
    model = joblib.load("house_price_model.pkl")
    print("Model loaded successfully!")
except Exception as e:
    print(f"Error loading model: {e}")
    model = None

# Your existing route and dropdown options
locations = ['South Delhi', 'Hauz Khas', 'Chandni Chowk']
green_areas = ['Low', 'Medium', 'High']
amenities = ['Few', 'Moderate', 'Many']
crime_rates = ['Low', 'Medium', 'High']

@app.route("/", methods=["GET", "POST"])
def index():
    prediction = None
    if request.method == "POST" and model is not None:
        try:
            # Collect and process input data
            input_data = pd.DataFrame([{
                "Location": request.form["location"],
                "Size (sq ft)": float(request.form["size"]),
                "Green Area": request.form["green_area"],
                "Nearby Amenities": request.form["nearby_amenities"],
                "Crime Rate": request.form["crime_rate"]
            }])
            
            prediction = f"â‚¹{int(model.predict(input_data)[0]):,}"
        except Exception as e:
            prediction = f"Prediction error: {str(e)}"

    return render_template("index.html",
                         prediction=prediction,
                         locations=locations,
                         green_areas=green_areas,
                         amenities=amenities,
                         crime_rates=crime_rates)

if __name__ == "__main__":
    app.run(debug=True)